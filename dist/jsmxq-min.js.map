{"version":3,"sources":["webpack://jsmxq/webpack/universalModuleDefinition","webpack://jsmxq/webpack/bootstrap","webpack://jsmxq/./src/index.ts","webpack://jsmxq/./src/Subscriber.ts","webpack://jsmxq/./src/Message.ts","webpack://jsmxq/./src/Xchange.ts","webpack://jsmxq/./src/LinkedList.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Subscriber","Xchange","gSubscriberCounter","this","uid","subjectList","msgSentCount","msgRecvdCount","subscriberObj","obj","subject","push","undefined","xchange","subscribeToSubject","data","dst","ttl","Error","msg","setSendTime","Date","now","setTtl","setDst","setSource","getName","post","e","onMessageReceive","gMsgCounter","content","source","sendTime","deliverTime","src","time","ReSubscriber","re","subscriberList","subscriberMap","Map","reSubscribers","msgQ","subscriber","list","getSubscriberList","set","indexOf","RegExp","resub","find","toString","getSubjectList","forEach","setXchange","idx","splice","unsubscribeToSubject","run","map","test","setDeliverTime","__onMessageReceive","getSubject","sendRe","getSize","pop","send","LLObj","number","priority","size","llObj","head","tail","next","prev","removeLLObj","getLLObj","llobj"],"mappings":"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","file":"jsmxq-min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsmxq\"] = factory();\n\telse\n\t\troot[\"jsmxq\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import Subscriber from \"./Subscriber\";\nimport Xchange from \"./Xchange\";\n\nexport {\n    Subscriber,\n    Xchange\n}","import Xchange from \"./Xchange\";\nimport Message from \"./Message\";\nimport ISubscriberObj from './ISubscriberObj';\n\n/**\n *Currently we use gSubscriberCounter to generate uid for subscriber.\n *It is incremented each time Subscriber object is created.\n */\nexport var gSubscriberCounter: number = 0;\n\nexport default class Subscriber implements ISubscriberObj {\n    name: string;\n    uid: number;\n    subjectList: Array<string | RegExp>;\n    msgSentCount: number;\n    msgRecvdCount: number;\n    subscriberObj: ISubscriberObj;\n    xchange: Xchange;\n\n    constructor(name: string) {\n        /**Name of subscriber. In future may be used to implement src/dst based message rules */\n        this.name = name;\n        /**Unique Id for each subscriber object*/\n        this.uid = gSubscriberCounter;\n        gSubscriberCounter++;\n        /**Subject list of interest */\n        this.subjectList = [];\n        /**Total messages sent by us */\n        this.msgSentCount = 0;\n        /**Total messages received by us */\n        this.msgRecvdCount = 0;\n        /**Object whose onMessageReceive will be called */\n        this.subscriberObj = this;\n    }\n\n    /**\n     *Returns name on subcriber. Currently is not used.\n     *We may use it in future when source/destination based routing is implemented.\n     */\n    getName(): string {\n        return this.name;\n    }\n\n    /**\n     *Returns uid of subscriber.\n     */\n    getUid(): number {\n        return this.uid;\n    }\n\n    /**\n     *Get list of subjects to which subscriber wants to receive message.\n     */\n    getSubjectList(): Array<string | RegExp> {\n        return this.subjectList;\n    }\n\n    /**\n     *Returns total message count sent by this subscriber.\n     */\n    getMsgSentCount(): number {\n        return this.msgSentCount;\n    }\n     \n    /**\n     *Returns total message count received by this subscriber.\n     */\n    getMsgRecvdCount(): number {\n        return this.msgRecvdCount;\n    }\n\n    /**\n     *By default, whenever a message is received, onMessageReceive(msg) function of subscriber is called.\n     *If you register callback object using this function, onMessageReceive(msg) of that object will be called.\n     *\n     *@param obj - This object must have function onMessageReceive(msg)\n     */\n    setCallbackObj(obj: ISubscriberObj) {\n        this.subscriberObj = obj;\n    }\n\n    /**\n     *Add subject to the list of subjects of interest. Subject could be a string or JS regular expresion object.\n     *\n     * @param subject string|RegExp - subject to be added.\n     */\n    addSubject(subject: string | RegExp) {\n        this.subjectList.push(subject);\n        if(this.xchange !== undefined) {\n            this.xchange.subscribeToSubject(this, subject);\n        }\n    }\n\n    /**\n     *set exchange of this subscriber.\n     *To be used internally only.\n     */\n    setXchange(xchange: Xchange) {\n        this.xchange = xchange; \n    }\n\n    /**\n     *post a message to registered Xchange.\n     *\n     * @param subject: string - The subject of message. When posting subject must a string only.\n     * @param data: Object - the data which will be posted. This data will be available at msg.content to receiver.\n     * @param dst: string - specify destination to which data should be delivered. At present not used.\n     * @param ttl: number - time to live. If message is not delivered, how much time should it live in system. At present not used.\n     */\n    post(subject: string, data: Object, dst: string = undefined, ttl: number = 10) {\n        if(this.xchange === undefined) {\n            throw new Error(\"Error: subscriber not registered to any Exchange\");\n        }\n\n        try {\n            let msg: Message = new Message(subject, data);\n            msg.setSendTime(Date.now());\n            msg.setTtl(ttl);\n            msg.setDst(dst);\n            msg.setSource(this.getName());\n            this.xchange.post(msg);\n            this.msgSentCount++;\n        } catch(e) {\n            throw(e);\n        }\n    }\n\n    /**\n     *This function is called whenever a message it to be delivered.\n     *Override this function in your parent object.\n     *\n     *@param msg: Message - msg to be delivered\n     */\n    onMessageReceive(msg: Message) {\n    }\n\n    /**\n     *Used internally by Xchange to deliver message.\n     *\n     * *@param msg: Message - msg to be delivered\n     */\n    __onMessageReceive(msg: Message) {\n        this.msgRecvdCount++;\n\n        if(this.subscriberObj !== undefined) {\n            this.subscriberObj.onMessageReceive(msg);\n        }\n    }\n}","export var gMsgCounter: number = 0;\n\nexport default class Message {\n\n    source: string;\n    dst: string;\n    subject: string;\n    sendTime: number;\n    deliverTime: number;\n    ttl: number;\n    uid: number;\n    content: Object;\n    \n    constructor(subject: string, data: Object) {\n        this.ttl = 10;\n        this.uid = gMsgCounter;\n        gMsgCounter++;\n        this.subject = subject;\n        this.content = data;\n    }\n\n    getSource(): string {\n        return this.source;\n    }\n\n    getDst(): string {\n        return this.dst;\n    }\n\n    getSubject(): string {\n        return this.subject;\n    }\n\n    getSendTime(): number {\n        return this.sendTime;\n    }\n\n    getDeleverTime(): number {\n        return this.deliverTime;\n    }\n\n    getContent(): Object {\n        return this.content;\n    }\n\n    getTtl(): number {\n        return this.ttl;\n    }\n\n    getUid(): number {\n        return this.uid;\n    }\n\n    setDst(dst: string) {\n        this.dst = dst;\n    }\n\n    setSource(src: string) {\n        this.source = src;\n    }\n    \n    setSendTime(time: number) {\n        this.sendTime = time;\n    }\n\n    setDeliverTime(time: number) {\n        this.deliverTime = time;\n    }\n\n    setTtl(ttl: number) {\n        this.ttl = ttl;\n    }\n\n    setUid(uid: number) {\n        this.uid = uid;\n    }   \n}","import LinkedList, { LLObj } from \"./LinkedList\"\nimport Message from \"./Message\"\nimport Subscriber from \"./Subscriber\"\n\n/**\n *Regular expression subscriber.\n *Subscribers those have REs as subject.\n *TBD put it it separate file.\n */\nclass ReSubscriber {\n    re: RegExp;\n    subscriberList: Array<Subscriber>;\n\n    constructor(re: RegExp) {\n        this.re = re;\n        this.subscriberList = [];\n    }\n}\n\n/**\n *Xchange provides following functionalities\n * 1. Register subscribers\n * 2. Receive messages and based on message subject send them to interested subscribers.\n * \n * Subscribers can use string or regular expression as subject. Subscribers with string as subject \n * are stored in a js Map<subject, subscriber>.\n * Subscribers with RE as subject are stored in ReSubscribers.\n * A subscriber can show interest in any number of subjects with mix of string/RE.\n */\nexport default class Xchange {\n\n    /**map to store subscribers with string as subject*/\n    subscriberMap: Map<string, Array<Subscriber>>;\n    /**ReSubscribers to store subscribers with RE as subject*/\n    reSubscribers: Array<ReSubscriber>;\n    /**In coming messages are stored in msgQ.*/\n    msgQ: LinkedList;\n\n    constructor() {\n        /**map<subject, subscribers<Array>> */\n        this.subscriberMap = new Map();\n        /**subscribers to subject regular expression*/\n        this.reSubscribers = [];\n        /**linked list of messages to be processed*/\n        this.msgQ = new LinkedList();\n    }\n\n    /**\n     *@returns Returns Map<string, Array<subscriber>>\n     */\n    getSubscriberMap(): Map<string, Array<Subscriber>> {\n        return this.subscriberMap;\n    }\n\n    /**\n     *Return list of subscribers to a subject.\n     *This function returns subscribers those have subject as string only.\n     *The subscribers interested in RE subjects are not returned by this function.\n     *\n     * @param subject: string\n     */\n    getSubscriberList(subject: string): Array<Subscriber> {\n        if(typeof(subject) === 'string' ) {\n            return this.subscriberMap.get(subject);\n        }\n    }\n\n    /**\n     *This function adds subscriber to the list of subscribers.\n     *@param subscriber: Subscriber - The subscriber to be added\n     *@param subject: string|RegExp - The subject in which subscriber is interested.\n     */\n    subscribeToSubject(subscriber: Subscriber, subject: string | RegExp) {        \n        if( typeof subject === 'string') {            \n            let list: Array<Subscriber> = this.getSubscriberList(subject);\n            if (list === undefined) {\n                list = [];\n                this.subscriberMap.set(subject, list);\n            }\n            if(list.indexOf(subscriber) === -1) {\n                list.push(subscriber);\n            }\n        } else if(subject instanceof RegExp) {\n            let resub = this.reSubscribers.find( resub => resub.re.toString() === subject.toString());\n            if (resub === undefined) {\n                resub = new ReSubscriber(subject);\n                resub.subscriberList.push(subscriber);\n                this.reSubscribers.push(resub);\n            } else if(resub.subscriberList.indexOf(subscriber) === -1) {\n                resub.subscriberList.push(subscriber);      \n            }\n        }\n    }\n\n    /**\n     *This function registers subscriber and adds it to desired subjects.\n     *This function must be called before calling any other function of Xchange.\n     *@param subscriber: Subscriber\n     */\n    subscribe(subscriber: Subscriber) {\n        if(subscriber.getName() === undefined || subscriber.getSubjectList() === undefined) {\n            throw new Error(\"Error: Subscriber parameter error, either name or subect is undefined\");\n        }\n     \n        subscriber.subjectList.forEach(subject => {\n            this.subscribeToSubject(subscriber, subject);\n        })\n       \n        subscriber.setXchange(this);\n    }\n\n    /**\n     *Remove subscriber from subject's subscriber list.\n     *@param subscriber: Subscriber - the subscriber which should be removed.\n     *@param subject: string|RegExp - the subject\n     */\n    unsubscribeToSubject(subscriber: Subscriber, subject: string | RegExp) {\n        if(typeof(subject) === 'string') {\n            let list: Array<Subscriber> = this.getSubscriberList(subject);\n                        \n            if (list !== undefined) {\n                let idx: number = list.indexOf(subscriber);\n                if( idx >= 0) {\n                    list.splice(idx, 1);\n                }\n            }\n        } else if(subject instanceof RegExp) {\n            let resub = this.reSubscribers.find( resub => resub.re.toString() === subject.toString());\n            if (resub !== undefined) {\n                let idx = resub.subscriberList.indexOf(subscriber);\n                if( idx >= 0) {\n                    resub.subscriberList.splice(idx, 1);\n                }\n            }\n        }\n    }\n\n    /**\n     *Unregister subscriber from Xchange. After this call subscriber will not be able to take part\n     *in messaging.\n     *@param subscriber: Subscriber - the subscriber to be removed.\n     */\n    unsubscribe(subscriber: Subscriber) {\n        if(subscriber.getName() === undefined || subscriber.getSubjectList() === undefined) {\n            throw new Error(\"Error: Subscriber parameter error, either name or subect is undefined\");\n        }\n     \n        subscriber.subjectList.forEach(subject => {\n            this.unsubscribeToSubject(subscriber, subject);\n        })\n       \n        subscriber.setXchange(undefined);\n    }\n\n    /**\n     *post message in this exchange. Message received is immediately processed for delivery, hence\n     *at this moment message reception and delevery is synchrosous.\n     *\n     * @param msg; Message - message to be posted.\n     */\n    post(msg: Message) {\n        this.msgQ.push(msg);\n        this.run();\n    }\n\n    /**\n     *Send a message wrt RE subscribers.\n     *msg subject is compared with each ReSubscriber and if found matching msg is delivered.\n     *This function is used internally by send(msg).\n     *\n     *@param msg: Message = message to be send.\n     */\n    sendRe(msg: Message) {\n        this.reSubscribers.map( (resub) => {\n            if(resub.re.test(msg.subject)) {\n                msg.setDeliverTime(Date.now());\n                resub.subscriberList.map(subscriber => subscriber.__onMessageReceive(msg));\n            }\n        })\n    }\n\n    /**\n     *Based on message subject send it to its desired recipients.\n     *\n     *@param msg: Message - message to be send.\n     */\n    send(msg: Message) {\n        if(msg.getSubject() === undefined) {\n            throw new Error(\"Error: message subject is undefined\");\n        }\n        /*Send message based on string subjects*/\n        let list: Array<Subscriber> = this.getSubscriberList(msg.getSubject());\n        if(list !== undefined) {\n            list.forEach(subscriber => {\n                msg.setDeliverTime(Date.now());\n                subscriber.__onMessageReceive(msg);\n            });\n        }\n\n        /*Send message based on RegExp subjects*/\n        this.sendRe(msg);\n    }\n\n    /**\n     *Process messages in q.\n     *Currently this function is called as soon as a message is received.\n     */\n    run() {\n        while(this.msgQ.getSize() > 0) {\n            let msg: Message = this.msgQ.pop() as Message;\n            this.send(msg);\n        }\n    }\n}","export class LLObj {\n    prev: LLObj;\n    next: LLObj;\n    number: Number;\n    priority: Number;\n    obj: Object;\n\n    constructor(obj: Object, number: Number = 0, priority: Number = 0) {\n        this.number = number;\n        this.priority = priority;\n        this.obj = obj;\n    }\n}\n\nexport default class LinkedList {\n    head: LLObj;\n    tail: LLObj;\n    size: number;\n\n    constructor() {\n        this.size = 0;\n    }\n\n    getSize(): number {\n        return this.size;\n    }\n\n    push(obj: Object) {\n        let llObj = new LLObj(obj, this.size);\n        \n        if(this.size === 0) {\n            this.head = llObj;\n        } else {\n            this.tail.next = llObj;\n            llObj.prev = this.tail;\n        }\n        \n        this.size++;\n        this.tail = llObj;        \n    }\n\n    removeLLObj(obj: LLObj) {\n        if(obj.prev !== undefined) {\n            obj.prev.next = obj.next;\n        }\n        if(obj.next !== undefined) {\n            obj.next.prev = obj.prev;   \n        }    \n        this.size--; \n    }\n\n    remove(idx: number) {\n        this.removeLLObj(this.getLLObj(idx));\n    }\n\n    /*get LLObj object from anywhere in list*/\n    getLLObj(idx: number): LLObj {\n        if(idx < 0 || idx >= this.size) {\n            throw new Error(\"Error: invalid index\");\n        }\n\n        let obj: LLObj;\n        if(idx < this.size/2) {\n           obj = this.head;\n            for(let i=0; i<idx; i++) {\n                obj = obj.next;\n            }\n        } else {\n            obj = this.tail;\n            for(let i=this.size-1; i>idx; i--) {\n                 obj = obj.prev;\n            }\n        }\n\n        return obj;\n    }\n\n    get(idx: number) : Object {\n        let llobj: LLObj = this.getLLObj(idx);\n        this.removeLLObj(llobj);\n        return llobj.obj;\n    }\n\n    getHead(): Object {\n        if(this.size > 0) {\n            let obj: any = this.head.obj;\n            this.head = this.head.next;\n            this.size--;\n            if(this.head) {\n                this.head.prev = undefined;\n            }\n            return obj;\n        }\n        throw new Error(\"No objects in list\");\n    }\n\n    pop() : Object {\n        if(this.size > 0) {\n            this.size--;\n            let obj: LLObj = this.tail;\n            this.tail = obj.prev;\n            if(this.tail !== undefined) {\n                this.tail.next = undefined;\n            }\n\n            obj.prev = undefined;\n            obj.next = undefined;\n           \n            return obj.obj;\n        } else {\n            throw new Error(\"Error pop() operation: Linked list in empty\")\n        }\n    }\n}"],"sourceRoot":""}